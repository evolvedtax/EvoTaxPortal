@model InstituteClientViewModel
@{
    ViewData["Title"] = "Client";
    Layout = "~/Views/Shared/_LayoutInstitute.cshtml";
}
<style>
    .dropdown-menu-horizontal {
        display: flex;
        flex-direction: row;
        flex-wrap: wrap;
    }

        .dropdown-menu-horizontal .dropdown-item {
            white-space: nowrap;
            margin-right: 10px;
        }

    .center-dropdown {
        left: -650% !important;
        transform: translateX(-50%) !important;
    }

    .hide-counter::-webkit-inner-spin-button {
        display: none;
    }

    .dropdown-toggle::after {
        display: inline-block;
        margin-left: 0.255em;
        vertical-align: 0.255em;
        content: none;
        border-top: 0.3em solid;
        border-right: 0.3em solid transparent;
        border-bottom: 0;
        border-left: 0.3em solid transparent;
    }


    .dataTables_filter {
        /*position: absolute;
                                                                                                                                        top: 0;
                                                                                                                                        left: 15%;*/
        padding: 0;
        /*padding-right: 60%*/
        text-align: left !important;
    }

    div.dataTables_wrapper div.dataTables_filter input {
        margin-left: 0.5em;
        display: inline-block;
        width: 200%;
    }

    .actions {
        text-align: center;
    }

    .bootstrap-tagsinput {
        width: 100%;
        border-radius: 0.6rem;
        border: 2px solid #929292;
    }
</style>

<div class="wrapper wrapper-content animated fadeInRight">
    <div class="row">
        <div class="col-lg-12">
            <div class="ibox" style="margin-bottom: 0px">
                <div class="ibox-title">
                </div>
                <div class="ibox-content">
                    <div class="row">
                        <div class="col-md-4">
                            <div>
                                <label class="mr-2" style="margin:auto">Select Entity for Further Details</label>
                                <select asp-items="ViewBag.EntitiesList" class="select2 form-control" id="changeEntity" style="width:107%">
                                </select>
                            </div>
                        </div>
                 

                    </div>
                </div>
            </div>
            <div class="ibox ">
                <div class="ibox-content">
                    <div class="row">

                        <div class="table-responsive show-container" id="maintable">

                            <table id="entity-table" class="table table-striped table-bordered table-hover dataTables-example">
                                <thead>
                                    <tr>
                                        <th><input type="checkbox" id="selectAll"></th>
                                        <th>Entity Name</th>
                                        <th>Partner Name</th>
                                        <th>Address</th>
                                        <th>City</th>
                                        <th>State</th>
                                        <th>Province (If Applicable)</th>
                                        <th>Zip/Postal Code</th>
                                        <th>Country</th>
                                        <th>Phone Number</th>
                                        <th>E-mail Address</th>
                                        <th>Status</th>
                                        <th>Form Completion Date</th>
                                        <th>Form Name</th>
                                        <th>Form Completed</th>
                                        <th>Last Updated By</th>
                                        <th>Last Updated On</th>
                                        @*      <th>Lock/Unlock</th>
                                        <th>Action</th>*@
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (Model.InstituteClientsResponse.Any())
                                    {
                                        foreach (var item in Model.InstituteClientsResponse)
                                        {
                                            string status = string.Empty;
                                            string IsDuplicatedStyle = string.Empty;
                                            @if (item.ClientStatus == AppConstants.ClientStatusFormSubmitted) { status = ""; }
                                            //"disabled"; }
                                            @if (item.IsDuplicated) { IsDuplicatedStyle = "style=color:red"; }
                                            <tr id="@item.ClientId" @IsDuplicatedStyle>
                                                <td @IsDuplicatedStyle>
                                                    <input type="checkbox" class="rowCheckbox" value="@item.ClientId" @status>
                                                    @if (item.IsDuplicated)
                                                    {
                                                        <span class="fa fa-exclamation-triangle" data-toggle="tooltip" data-original-title="Duplicate Record"></span>
                                                    }
                                                </td>
                                                <td @IsDuplicatedStyle>@item.EntityName</td>
                                                <td>@string.Concat(item.PartnerName1," ", item.PartnerName2)</td>

                                                @*<td>@string.Concat(item.Address1," ", item.Address2,", ",item.City,", ",item?.State , item?.Province,", ",item?.Zip,", ",item?.Country)</td>*@
                                                <td>@string.Concat(item.Address1," ", item.Address2)</td>
                                                <td>@item.City</td>
                                                <td>@item.State</td>
                                                <td>@item.Province</td>
                                                <td>@item.Zip</td>
                                                <td>@item.Country</td>
                                                <td>@item.PhoneNumber</td>
                                                <td>@item.ClientEmailId</td>
                                                <td>@item.StatusName</td>
                                                <td>@item.ClientStatusDate?.ToString("MM-dd-yyyy")</td>
                                                <td>@string.Concat("Form"," ",item.FormName)</td>
                                                <td><a href="~/@item.FileName">@item.FileName</a></td>
                                                <td>@item.LastUpdatedByName</td>
                                                <td>@item.LastUpdatedOn?.ToString("MM-dd-yyyy")</td>
                                                @*       <td class="text-center">
                                        @if (item?.IsLocked ?? false)
                                        {
                                        <span class="fa fa-lock"></span>
                                        }
                                        else
                                        {
                                        <span class="fa fa-unlock"></span>
                                        }
                                        </td>
                                        <td @IsDuplicatedStyle class="actions">
                                        @if (item.IsDuplicated)
                                        {
                                        <div class="dropdown">
                                        <button class="dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                        <span class="fa fa-bars"></span>
                                        </button>
                                        <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                        <div class="dropdown-menu-horizontal">
                                        <a class="dropdown-item save-row" href="javascript:void()" onclick="COMMON.confirmAlertActive('keep','KeepClienRecord','id=@item?.ClientId','')">Keep</a>
                                        <a class="dropdown-item edit-row" href="javascript:void()" data-toggle="modal" data-target="#editModal" data-row-id="@item?.ClientId">Edit</a>
                                        <a class="dropdown-item" href="javascript:void()" onclick="COMMON.confirmAlert('Are you sure, you want to delete this record?','DeleteClienRecord','id=@item?.ClientId','')">Delete</a>
                                        </div>
                                        </div>
                                        </div>
                                        }
                                        else
                                        {
                                        <div class="dropdown">
                                        <button class="dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                                        <span class="fa fa-bars"></span>
                                        </button>
                                        <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                                        <div class="dropdown-menu-horizontal">
                                        @if (item?.IsLocked ?? false)
                                        {
                                        <a class="dropdown-item" href="javascript:void()" onclick="COMMON.confirmAlertActive('Unlock','LockUnlockClient',{selectedValues:'@item?.ClientId',isLocked:'false'})">Unlock</a>
                                        }
                                        else
                                        {
                                        <a class="dropdown-item edit-row" href="javascript:void()" data-toggle="modal" data-target="#editModal" data-row-id="@item?.ClientId">Edit</a>
                                        <a class="dropdown-item" href="javascript:void()" onclick="COMMON.confirmAlert('Are you sure, you want to delete this record?','DeleteClient','id=@item?.ClientId','')">Delete</a>
                                        <a class="dropdown-item" href="javascript:void()" onclick="COMMON.confirmAlertActive('Lock','LockUnlockClient',{selectedValues:'@item?.ClientId',isLocked:'true'})">Lock</a>
                                        }
                                        @if (item?.ClientStatus != AppConstants.ClientStatusFormSubmitted)
                                        {
                                        <a class="dropdown-item" href="javascript:void()" onclick="COMMON.doSendEmailAjaxPostWithJSONResponse('/Institute/SendEmail', {selectedValues:'@item?.ClientId'})">Send E-mail</a>
                                        }
                                        </div>
                                        </div>
                                        </div>
                                        }
                                        </td>*@
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script type="text/javascript">
        // Upgrade button class name
        $.fn.dataTable.Buttons.defaults.dom.button.className = 'btn btn-white btn-sm';

        function CheckIsEmailFrequencyEditable() {
            var $submitEmFreq;
            var isEnableEmailFrequency = $('#hdnIsEnableEmailFrequency').val() === "false";
            var $emailFrequency = $('#EmailFrequency');
            $submitEmFreq = $('#submitEmFreq');


            if (!isEnableEmailFrequency) {
                $emailFrequency.prop('readonly', true);
                $submitEmFreq.prop('disabled', true);

            }
            else {
                //$('#Infoicon').hide();
                $('input[name="EmailFrequency"]').removeAttr('data-original-title');
            }
        }




        $(document).ready(function () {

            $(document).on('click', 'a[class^="dt-button dropdown-item"]', function (event) {
                event.preventDefault(); // Prevent the default anchor behavior
                var buttonText = $(this).find('span').text().trim();

                var searchParams = new URLSearchParams(window.location.search);
                var entityId = searchParams.get('EntityId');
                var InstituteId = searchParams.get('InstituteId');

                $.ajax({
                    url: '/Institute/LogButtonClicked',
                    type: 'POST',
                    data: { buttonText: buttonText, entityId: entityId, InstituteId: InstituteId },
                    success: function () {
                        console.log('Button text saved to audit log');
                    },
                    error: function () {
                        console.error('Error saving button text to audit log');
                    }
                });
            });







            $("#openModalButton").click(function () {
                //$('#shareModelHeader').html('Share access to <br/> \'' + $("#changeEntity option:selected").text().trim() + '\'');
                var entityName = $("#changeEntity option:selected").text().trim();
                $('#shareModelHeader').html('Share access to<br/><span style="display: block; text-align: center; margin-left: -23px">\'' + entityName + '\'</span>');
                $("#shareModal").modal("show");
            });

            $('.tagsinput').tagsinput({
                tagClass: 'label label-primary'
            });

            $('.tagsinput').on('itemAdded', function (event) {
                var email = event.item.trim();
                if (!isValidEmail(email)) {
                    $(this).tagsinput('remove', email);
                    COMMON.AlertSuccessMessage("Entity already shared", "This entity is already shared with entered user.", "error")
                }
            });

            function isValidEmail(email) {
                var entityId = $('#changeEntity').val();
                return COMMON.doAjaxGetWithJSONResponse('@Url.Action("ValidateEmailDomainAddressOnInvitation","Account")', { SUEmailAddress: email, EntityId: entityId })
            }

            $('[data-toggle="tooltip"]').tooltip({
                placement: 'top'
            });
            CheckIsEmailFrequencyEditable();

            $("select").select2({
                theme: 'bootstrap4',
                placeholder: "Select One",
                //allowClear: true
            });
            $('.btn-menu-toggle').click(function () {
                var obj = $('.dt-button-collection');
            });
            $('.edit-row').click(function () {
                // Get the row ID from the data attribute
                var rowId = $(this).data('row-id');

                // Retrieve the row data based on the ID
                var rowData = getRowData(rowId); // Implement your own function to retrieve the row data


                // Populate the form fields with the row data
                populateModalFields(rowData);
            });

            function getRowData(rowId) {
                var row = $("#" + rowId); // Select the row by its ID
                var rowData = {
                    ClientId: rowId,
                    PartnerName1: row.find("td:nth-child(3)").text(),
                    PartnerName2: row.find("td:nth-child(4)").text(),
                    Address1: row.find("td:nth-child(5)").text(),
                    Address2: row.find("td:nth-child(6)").text(),
                    City: row.find("td:nth-child(8)").text(),
                    State: row.find("td:nth-child(9)").text(),
                    Province: row.find("td:nth-child(10)").text(),
                    Zip: row.find("td:nth-child(11)").text(),
                    Country: row.find("td:nth-child(12)").text(),
                    PhoneNumber: row.find("td:nth-child(13)").text(),
                    ClientEmailId: row.find("td:nth-child(14)").text(),
                    Status: row.find("td:nth-child(15)").text(),
                };

                return rowData;
            }
            // Function to populate modal input fields with row data
            function populateModalFields(rowData) {
                $('#clientId').val(rowData.ClientId);
                $('#partnerName1').val(rowData.PartnerName1);
                $('#partnerName2').val(rowData.PartnerName2);
                $('#address1').val(rowData.Address1);
                $('#address2').val(rowData.Address2);
                $('#city').val(rowData.City);
                $('#state').val(rowData.State).change();
                $('#province').val(rowData.Province);
                $('#zip').val(rowData.Zip);
                $('#country').val(rowData.Country).change();
                $('#phoneNumber').val(rowData.PhoneNumber);
                $('#ClientEmailId').val(rowData.ClientEmailId);

                if (rowData.Status != 'Active') {
                    $('#ClientEmailId').prop('readonly', true);
                }
                else {
                    $('#ClientEmailId').prop('readonly', false);
                }

            }
            $('.i-checks').iCheck({
                checkboxClass: 'icheckbox_square-green',
                radioClass: 'iradio_square-green',
            });
            $('.dataTables-example').DataTable({
                "order": [[0, "desc"]],
                lengthChange: false, // Hide the "Show [X] entries" dropdown
                pageLength: 10,
                fixedColumns: {
                    left: 2,
                    right: 1
                },
                fixedHeader: true,
                scrollX: true,
                dom: '<"html5buttons"B>lTfgitp',
                buttons: [
                    {
                        extend: 'collection',
                        text: '<i class="fa fa-ellipsis-h"></i>',
                        className: 'btn-menu-toggle',
                        buttons: [
                            {
                                text: '<i class="fa fa-download"></i> Download New Client Template',
                                className: 'btn-template',
                                action: function (e, dt, button, config) {
                                    let url = 'DownloadExcel';
                                    let params = { fileType: '@AppConstants.Client' }
                                    COMMON.doAjaxToDownloadFile(url, params, '@AppConstants.InstituteClientTemplate');
                                }
                            },
                            {
                                extend: 'excel',
                                title: '',
                                text: '<i class="fa fa-file-excel-o"></i> Export to Excel',
                                className: 'btn-excel'
                            },
                            //{
                            //    text: '<i class="fa fa-upload"></i> Import Client Data',
                            //    className: 'btn-imp-data',
                            //    action: function (e, dt, button, config) {
                            //        $('#uploadDataDiv').prop('hidden', false);
                            //    }
                            //},
                            //{
                            //    text: '<i class="fa fa-trash"></i> Trash',
                            //    className: 'btn-recycle-bin',
                            //    action: function (e, dt, button, config) {
                            //        window.location.href = '/Institute/ClientsRecyleBin?entityId=' + $('#changeEntity').val();
                            //    }
                            //},
                            //{
                            //    text: '<i class="fa fa-envelope"></i> Send Email',
                            //    className: 'email-btn',
                            //    action: function (e, dt, button, config) {
                            //        var selectedValues = [];
                            //        $('.rowCheckbox:checked').each(function () {
                            //            selectedValues.push($(this).val());
                            //        });

                            //        if (selectedValues.length === 0) {
                            //            COMMON.notification(3, 'No row selected. Please select at least one row.');
                            //            return;
                            //        }
                            //        swal({
                            //            title: "Sending Email...",
                            //            text: "Email will send to the clients awaited for form submission",
                            //            type: "info",
                            //            showCancelButton: false,
                            //            confirmButtonColor: "#1ab394",
                            //            confirmButtonText: "Ok",
                            //            //cancelButtonText: "Cancel"
                            //        },
                            //            function () {
                            //                let params = { selectedValues: selectedValues }
                            //                COMMON.doSendEmailAjaxPostWithJSONResponse('/Institute/SendEmail', params);
                            //            });
                            //        //let params = { selectedValues: selectedValues }
                            //        //COMMON.doSendEmailAjaxPostWithJSONResponse('/Institute/SendEmail', params);
                            //        //$('.loading').show();

                            //    }
                            //},
                            //{
                            //    text: '<i class="fa fa-unlock"></i> Unlock All',
                            //    className: 'btn-imp-data',
                            //    action: function (e, dt, button, config) {
                            //        var selectedValues = [];
                            //        $('.rowCheckbox:checked').each(function () {
                            //            selectedValues.push($(this).val());
                            //        });

                            //        if (selectedValues.length === 0) {
                            //            COMMON.notification(3, 'No row selected. Please select at least one row.');
                            //            return;
                            //        }

                            //        //$('.loading').show();
                            //        // Send the selectedValues to the controller using AJAX or a form submission
                            //        COMMON.confirmAlertActiveAll('Unlock', 'LockUnlockClient', { selectedValues: selectedValues, isLocked: 'false' })
                            //    }
                            //},
                            //{
                            //    text: '<i class="fa fa-lock"></i> Lock All',
                            //    className: 'btn-imp-data',
                            //    action: function (e, dt, button, config) {
                            //        var selectedValues = [];
                            //        $('.rowCheckbox:checked').each(function () {
                            //            selectedValues.push($(this).val());
                            //        });

                            //        if (selectedValues.length === 0) {
                            //            COMMON.notification(3, 'No row selected. Please select at least one row.');
                            //            return;
                            //        }

                            //        //$('.loading').show();
                            //        // Send the selectedValues to the controller using AJAX or a form submission
                            //        COMMON.confirmAlertActiveAll('Lock', 'LockUnlockClient', { selectedValues: selectedValues, isLocked: 'true' })
                            //    }
                            //}
                        ],
                    },
                    //{
                    //    text: 'New <i class="fa fa-plus"></i>',
                    //    className: 'new-btn',
                    //    action: function (e, dt, button, config) {
                    //        $("#addModal").modal("show");
                    //    }
                    //},
                    //{
                    //    text: 'Share <i class="fa fa-share"></i>',
                    //    className: 'email-btn',
                    //    action: function (e, dt, button, config) {
                    //        $('#shareModelHeader').html('Share \'' + $("#changeEntity option:selected").text() + '\'');
                    //        $("#shareModal").modal("show");
                    //    }
                    //},
                ],
                //"drawCallback": function () {
                //    var pageInfo = this.api().page.info();
                //    $('#pageLengthInput').val(pageInfo.length);
                //},
                initComplete: function () {

                    //var api = this.api();
                    //$('#pageLengthInput').on('keyup change', function () {
                    //    var value = parseInt($(this).val(), 10);
                    //    if (!isNaN(value)) {
                    //        api.page.len(value).draw();
                    //    }
                    //});
                    //$('.dataTables_length').hide(); // Hide the original page length dropdown
                    $('.btn-menu-toggle').attr('data-toggle', 'tooltip').attr('data-placement', 'top').attr('data-original-title', 'Menu').tooltip();
                    // Add custom CSS class to the dropdown list container
                    $('.btn-menu-toggle').on('click', function () {
                        var dropdown = $(this).siblings('.dt-button-collection');

                        dropdown.addClass('center-dropdown');
                    });
                    //this.api()
                    //    .columns([1, 13, 16])
                    //    .every(function () {
                    //        let column = this;
                    //        let title = column.header().textContent;

                    //        // Create input element
                    //        let input = document.createElement('input');
                    //        input.placeholder = title;
                    //        column.header().replaceChildren(input);

                    //        // Event listener for user input
                    //        input.addEventListener('keyup', () => {
                    //            if (column.search() !== input.value) {
                    //                column.search(input.value).draw();
                    //            }
                    //        });

                    //        // Event listener for click on the input element
                    //        input.addEventListener('click', (event) => {
                    //            event.stopPropagation();
                    //        });
                    //    });
                }
            });



            $('#sendEmail').click(function () {
                var selectedValues = [];
                $('.rowCheckbox:checked').each(function () {
                    selectedValues.push($(this).val());
                });

                if (selectedValues.length === 0) {
                    COMMON.notification(3, 'No row selected. Please select at least one row.');
                    return;
                }

                $('.loading').show();
                // Send the selectedValues to the controller using AJAX or a form submission
                let params = { selectedValues: selectedValues }
                COMMON.doAjaxPostWithJSONResponse('/Institute/SendEmail', params);
            });
            // Select All checkbox
            $('#selectAll').change(function () {
                $('.rowCheckbox:not(:disabled)').prop('checked', $(this).prop('checked'));
                $('.email-btn').text('Send E-mail to All');
                var selectedValues = [];
                $('.rowCheckbox:checked').each(function () {
                    selectedValues.push($(this).val());
                });
                if (selectedValues.length === 0) {
                    $('.email-btn').text('Send E-mail');
                }
            });

            // Individual row checkbox
            $('.rowCheckbox').change(function () {
                if ($('.rowCheckbox:checked').length == $('.rowCheckbox').length) {
                    $('#selectAll').prop('checked', true);
                    $('.email-btn').text('Send E-mail to All');
                } else {
                    $('#selectAll').prop('checked', false);
                    $('.email-btn').text('Send E-mail to Selected');
                    var selectedValues = [];
                    $('.rowCheckbox:checked').each(function () {
                        selectedValues.push($(this).val());
                    });
                    if (selectedValues.length === 0) {
                        $('.email-btn').text('Send E-mail');
                    }
                }
            });



            // Get the file input element
            var fileInput = document.getElementById('uploadClients');
            // Add an event listener to the file input
         
            function uploadData(event) {
                debugger;
                let entityId = $('#changeEntity').val();
                let entityName = $('#changeEntity option:selected').text().trim();
                COMMON.uploadFile(event, '/Institute/uploadClients', { entityId, entityName });
                $('#changeEntity').change();
            }
            bsCustomFileInput.init();
        });
        $('#saveBtn').click(function () {
            let form = $('#regForm');
            if (form.valid()) {
                form.submit();
            }
            return false;
        });
        function ajaxsuccess(response) {
            if (response.Status == true) {
                COMMON.notification(1, "Data is updated");
            } else {
                COMMON.notification(2, "");
            }
            $("#editModal").modal("hide");
            window.location.reload();
        }
        $('#saveAddBtn').click(function () {
            let form = $('#addForm');
            if (form.valid()) {
                $('#entityId').val($('#changeEntity').val());
                $('#entityName').val($('#changeEntity option:selected').text());
                form.submit();
            }
            return false;
        });
        function ajaxsuccessAdd(response) {
            if (response.Status == true) {
                COMMON.notification(1, response.Message);
                $("#addModal").modal("hide");
                window.location.reload();
            } else {
                COMMON.notification(2, response.Message);
            }

        }
        $('#saveShareBtn').click(function () {
            let form = $('#shareForm');
            if (form.valid()) {
                $('#entityshareId').val($('#changeEntity').val());
                $('#entityshareName').val($('#changeEntity option:selected').text());
                var emails = [];
                $(".tag.label-primary").each(function () {
                    emails.push($(this).text());
                });
                $('#emailAddresses').val(JSON.stringify(emails));
                form.submit();
                $("#shareModal").modal("hide");
            }
            return false;
        });
        function ajaxsuccessShare(response) {
            if (response.Status == true) {
                COMMON.notification(1, response.Message);
                $("#shareModal").modal("hide");
                //window.location.reload();
            } else {
                COMMON.notification(2, response.Message);
            }

        }
        $('#submitEmFreq').click(function () {
            let form = $('#formUpdateEmailFrequency');
            if (form.valid()) {
                $('#EntityIdFreq').val($('#changeEntity').val());
                form.submit();
            }
            return false;
        });
        function ajaxsuccessUpdateEmailFrequency(response) {
            if (response.Status == true) {
                COMMON.notification(1, "Data is updated");
            } else {
                COMMON.notification(2, "Something went wrong");
            }
        }
        function ajaxsuccessRecentDelete(response) {
            if (response.Status == true && response.ErrorStatus == false) {
                COMMON.notification(1, response.Message);
                window.location.reload();
            }
            else if (response.Status == true && response.ErrorStatus == true) {
                COMMON.notification(1, response.Message);
            }
            else {
                COMMON.notification(2, "Something went wrong");
            }
        }
        function ShowHideProvince(obj) {
            if (obj.value == 'United States') {
                $('.provinceDiv').prop('hidden', true);
                $('.province').val('');
                $('.stateDiv').prop('hidden', false);
                $('.lblZipCode').text('Zip Code').append(`<span class="text-danger"> *</span>`);
            } else {
                $('.provinceDiv').prop('hidden', false);
                $('.stateDiv').prop('hidden', true);
                $('.state').val(1);
                $('.lblZipCode').text('Zip/Postal Code').append(`<span class="text-danger"> *</span>`);
            }
        }
    </script>
    }
