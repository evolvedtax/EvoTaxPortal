// <auto-generated />
using System;
using EvolvedTax.Data.Models.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EvolvedTax.Data.Migrations
{
    [DbContext(typeof(EvolvedtaxContext))]
    [Migration("20230801162215_identity init")]
    partial class identityinit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Message")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.AvailabilityMaster", b =>
                {
                    b.Property<DateTime?>("AvailabilityDate")
                        .HasColumnType("date");

                    b.Property<int>("AvailabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AvailabilityID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AvailabilityId"));

                    b.Property<int?>("EmpId")
                        .HasColumnType("int")
                        .HasColumnName("EmpID");

                    b.Property<TimeSpan?>("TimeEnd")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("TimeStart")
                        .HasColumnType("time");

                    b.ToTable("AvailabilityMaster", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.ContactDetail", b =>
                {
                    b.Property<string>("BusinessAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Business Address");

                    b.Property<string>("BusinessContact")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Business Contact");

                    b.Property<string>("Country")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FullName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Full Name");

                    b.Property<string>("JobTitle")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Job Title");

                    b.Property<string>("Manager")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("MobileContact")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Mobile Contact");

                    b.Property<string>("StateZip")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("State Zip");

                    b.ToTable((string)null);

                    b.ToView("ContactDetails", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.EmailDomain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EmailDomain1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("EmailDomain");

                    b.HasKey("Id");

                    b.ToTable("EmailDomain", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.EmployeesMaster", b =>
                {
                    b.Property<string>("BusinessAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Business Address");

                    b.Property<string>("BusinessContact")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Business Contact");

                    b.Property<string>("Country")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("EmpId")
                        .HasColumnType("int")
                        .HasColumnName("EmpID");

                    b.Property<string>("FullName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Full Name");

                    b.Property<string>("JobTitle")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Job Title");

                    b.Property<string>("MobileContact")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Mobile Contact");

                    b.Property<string>("StateZip")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("State Zip");

                    b.Property<int?>("Supervisor")
                        .HasColumnType("int");

                    b.ToTable("EmployeesMaster", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.EvoClientsMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClientAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ClientCityStateZip")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ClientContactNumber")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ClientEmailAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ClientID");

                    b.Property<string>("ClientName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ClientNotes")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ContactPerson")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ContactPersonDesignation")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EvoClientsMaster", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.EvoProjectsMaster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ProjectEndDate")
                        .HasColumnType("date");

                    b.Property<string>("ProjectId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ProjectID");

                    b.Property<string>("ProjectName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("ProjectStartDate")
                        .HasColumnType("date");

                    b.Property<string>("ProjectStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("EvoProjectsMaster", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.EvoTaskMaster", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TaskID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskId"));

                    b.Property<string>("TaskName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("TaskId");

                    b.ToTable("EvoTaskMaster", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.EvoTeam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Location")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TeamMember")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("TeamMemberId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("TeamMemberID");

                    b.HasKey("Id");

                    b.ToTable("EvoTeam", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.ExemptPayeeCode", b =>
                {
                    b.Property<int>("ExemptId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ExemptID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExemptId"));

                    b.Property<string>("ExemptCode")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ExemptValue")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("ExemptId");

                    b.ToTable("ExemptPayeeCode", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.FatcaCode", b =>
                {
                    b.Property<int>("FatcaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FATCA_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FatcaId"));

                    b.Property<string>("FatcaCode1")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("FATCA_Code");

                    b.Property<string>("FatcaValue")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.HasKey("FatcaId");

                    b.ToTable("FATCA_CODES", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.GeneralQuestionEntitiesBckup", b =>
                {
                    b.Property<string>("BackupWithHolding")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Ccountry")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CCountry");

                    b.Property<bool?>("De")
                        .HasColumnType("bit")
                        .HasColumnName("DE");

                    b.Property<string>("DeownerName")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("DEOwnerName");

                    b.Property<bool?>("EnitityManagendOutSideUsa")
                        .HasColumnType("bit")
                        .HasColumnName("EnitityManagendOutSideUSA");

                    b.Property<string>("EntityType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Fatca")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FATCA");

                    b.Property<string>("FormType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Idnumber")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("IDNumber");

                    b.Property<string>("Idtype")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("IDType");

                    b.Property<string>("MailingAddress1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MailingAddress2")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("MailingCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MailingCountry")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MailingProvince")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MailingState")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MailingZip")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Number")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OrgName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Payeecode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PAYEECODE");

                    b.Property<string>("PermanentAddress1")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PermanentAddress2")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PermanentCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PermanentCountry")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PermanentProvince")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PermanentState")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PermanentZip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("RetirementPlan")
                        .HasColumnType("bit");

                    b.Property<string>("TypeofTaxNumber")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Uspartner")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("USPartner");

                    b.Property<int?>("W8expId")
                        .HasColumnType("int")
                        .HasColumnName("W8ExpId");

                    b.Property<string>("W8formType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("W8FormType");

                    b.ToTable("GeneralQuestionEntities_bckup", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.GeneralQuestionEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BackupWithHolding")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Ccountry")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("CCountry");

                    b.Property<bool?>("De")
                        .HasColumnType("bit")
                        .HasColumnName("DE");

                    b.Property<string>("DeownerName")
                        .HasMaxLength(300)
                        .IsUnicode(false)
                        .HasColumnType("varchar(300)")
                        .HasColumnName("DEOwnerName");

                    b.Property<bool?>("EnitityManagendOutSideUsa")
                        .HasColumnType("bit")
                        .HasColumnName("EnitityManagendOutSideUSA");

                    b.Property<string>("EntityType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Fatca")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FATCA");

                    b.Property<string>("FormType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Idnumber")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("IDNumber");

                    b.Property<string>("Idtype")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("IDType");

                    b.Property<string>("MailingAddress1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MailingAddress2")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("MailingCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MailingCountry")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MailingProvince")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MailingState")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MailingZip")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Number")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OrgName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Payeecode")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("PAYEECODE");

                    b.Property<string>("PermanentAddress1")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PermanentAddress2")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PermanentCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PermanentCountry")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PermanentProvince")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PermanentState")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PermanentZip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("RetirementPlan")
                        .HasColumnType("bit");

                    b.Property<string>("TypeofTaxNumber")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Uspartner")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("USPartner");

                    b.Property<int?>("W8expId")
                        .HasColumnType("int")
                        .HasColumnName("W8ExpId");

                    b.Property<string>("W8formType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("W8FormType");

                    b.HasKey("Id");

                    b.ToTable("GeneralQuestionEntities");
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.GeneralQuestionIndividual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryofCitizenship")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MailingAddress1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MailingAddress2")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("MailingCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MailingCountry")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MailingProvince")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MailingState")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("MailingZip")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PermanentAddress1")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PermanentAddress2")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("PermanentCity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PermanentCountry")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PermanentProvince")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PermanentState")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PermanentZip")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("RetirementPlan")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("SocialSecurityNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TypeofTaxNumber")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("Us1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("US1");

                    b.Property<string>("Uscitizen")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("USCitizen");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK_GQ_1");

                    b.ToTable("GeneralQuestionIndividual", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.InstituteEntity", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EntityID")
                        .HasComment("EntityID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<int>("InstituteId")
                        .HasColumnType("int")
                        .HasColumnName("Institute_ID");

                    b.Property<string>("Address1")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Address2")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("City")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Country")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Ein")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("EIN");

                    b.Property<int?>("EmailFrequency")
                        .HasColumnType("int");

                    b.Property<string>("EntityName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("EntityRegistrationDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("InActiveDate")
                        .HasColumnType("date");

                    b.Property<string>("InstituteName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Institute_Name");

                    b.Property<int>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("((1))");

                    b.Property<bool?>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdatedDate")
                        .HasColumnType("date");

                    b.Property<string>("Province")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("State")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Zip")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("EntityId", "InstituteId");

                    b.ToTable("InstituteEntities");
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.InstituteMaster", b =>
                {
                    b.Property<int>("InstId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InstID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstId"));

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ApprovedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("CountryOfIncorporation")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("DateFormat")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("FirstName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Ftin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("FTIN");

                    b.Property<string>("Gin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("GIN");

                    b.Property<string>("Idnumber")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("IDNumber");

                    b.Property<string>("Idtype")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("IDType");

                    b.Property<string>("InstituteLogo")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("InstitutionName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Madd1")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("MAdd1");

                    b.Property<string>("Madd2")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("MAdd2");

                    b.Property<string>("Mcity")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("MCity");

                    b.Property<string>("Mcountry")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("MCountry");

                    b.Property<string>("Mprovince")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("MProvince");

                    b.Property<string>("Mstate")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("MState");

                    b.Property<string>("Mzip")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("MZip");

                    b.Property<string>("Otp")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("OTP");

                    b.Property<DateTime?>("OtpexpiryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("OTPExpiryDate");

                    b.Property<string>("Padd1")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("PAdd1");

                    b.Property<string>("Padd2")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("PAdd2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PasswordSecuredA1")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PasswordSecuredA2")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PasswordSecuredA3")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PasswordSecuredQ1")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PasswordSecuredQ2")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PasswordSecuredQ3")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Pcity")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("PCity");

                    b.Property<string>("Pcountry")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("PCountry");

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Pprovince")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("PProvince");

                    b.Property<string>("Pstate")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("PState");

                    b.Property<string>("Pzip")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("PZip");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("RegistrationExpiryDate")
                        .HasColumnType("date");

                    b.Property<DateTime?>("RequestDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RequestIp")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("RequestIP");

                    b.Property<string>("ResetToken")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<DateTime?>("ResetTokenExpiryTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Status")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("StatusDate")
                        .HasColumnType("date");

                    b.Property<string>("SupportEmail")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("TypeofEntity")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("InstId");

                    b.ToTable("InstituteMaster", null, t =>
                        {
                            t.HasTrigger("trg_UpdateOTP");
                        });
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.InstitutesClient", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ClientID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"));

                    b.Property<string>("Address1")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Address 1");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Address 2");

                    b.Property<string>("City")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ClientEmailId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ClientEmailID");

                    b.Property<short?>("ClientStatus")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("ClientStatusDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Country")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int")
                        .HasColumnName("EntityID");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("FileName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("FormName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("InActiveDate")
                        .HasColumnType("date");

                    b.Property<short>("InstituteId")
                        .HasColumnType("smallint")
                        .HasColumnName("InstituteID");

                    b.Property<int>("IsActive")
                        .HasColumnType("int");

                    b.Property<bool>("IsDuplicated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((0))");

                    b.Property<bool?>("IsLocked")
                        .HasColumnType("bit");

                    b.Property<int?>("LastUpdatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastUpdatedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("Otp")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("OTP");

                    b.Property<DateTime?>("OtpexpiryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("OTPExpiryDate");

                    b.Property<string>("PartnerName1")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Partner Name 1")
                        .HasComment("Partner Name 1");

                    b.Property<string>("PartnerName2")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Partner Name 2");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Phone Number");

                    b.Property<string>("Province")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime?>("RequestDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("RequestIp")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("RequestIP");

                    b.Property<string>("State")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("ClientId");

                    b.ToTable("InstitutesClient", null, t =>
                        {
                            t.HasTrigger("trg_UpdateOTPClient");
                        });
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.MasterClientStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<string>("StatusName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("StatusId")
                        .HasName("PK_MasterCStatus");

                    b.ToTable("Master_ClientStatus", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.MasterEntityType", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EntityID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<string>("EntityType")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.HasKey("EntityId");

                    b.ToTable("Master_EntityType", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.MasterPoboxWildcard", b =>
                {
                    b.Property<string>("WildCard")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.ToTable("Master_POBox_Wildcard", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.MasterState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("StateId")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("StateID")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.ToTable("Master_State", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.MasterStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<string>("StatusName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("StatusId")
                        .HasName("PK_MasterStatus");

                    b.ToTable("Master_Status", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.MasterUser", b =>
                {
                    b.Property<short>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("UserID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("UserId"));

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Address2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ApprovedBy")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ApprovedOn")
                        .HasColumnType("datetime");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EmailId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Email_ID");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("date");

                    b.Property<string>("Justification")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("NameofEntity")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("NameofIndividual1")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("NameofIndividual2")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Province")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RequestIp")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("RequestIP");

                    b.Property<string>("State")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<short>("TypeId")
                        .HasColumnType("smallint")
                        .HasColumnName("TypeID");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ZipPostalCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ZIP_PostalCode");

                    b.HasKey("UserId");

                    b.ToTable("Master_User", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.MasterUserType", b =>
                {
                    b.Property<short>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("TypeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("TypeId"));

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("TypeId");

                    b.ToTable("Master_UserType", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.Menu", b =>
                {
                    b.Property<int>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MenuId"));

                    b.Property<string>("IconClass")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Link")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.HasKey("MenuId");

                    b.ToTable("Menu", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.MstrCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Country")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("CountryId")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .HasColumnName("CountryID")
                        .IsFixedLength();

                    b.Property<string>("Favorite")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.HasKey("Id");

                    b.ToTable("MSTR_Country", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.Otphistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("EntryDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Otp")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("OTP");

                    b.Property<DateTime?>("OtpexpiryDate")
                        .HasColumnType("datetime")
                        .HasColumnName("OTPExpiryDate");

                    b.Property<string>("UserType")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.ToTable("OTPHistory", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.PageChecking", b =>
                {
                    b.Property<string>("CurrentPage")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PreviousPage")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int?>("UserType")
                        .HasColumnType("int");

                    b.ToTable("PageChecking", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.PasswordChangeLog", b =>
                {
                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("EmailId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("EmailID");

                    b.Property<short>("PassId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("PassID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("PassId"));

                    b.Property<DateTime>("PasswordChangedDate")
                        .HasColumnType("date");

                    b.HasKey("Password", "EmailId")
                        .HasName("PK_PasswordChangeLog_1");

                    b.ToTable("PasswordChangeLog", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.PasswordSecurityQuestion", b =>
                {
                    b.Property<short>("PasswordSecurityQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("PasswordSecurityQuestionID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("PasswordSecurityQuestionId"));

                    b.Property<string>("SecurityQuestion")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("PasswordSecurityQuestionId");

                    b.ToTable("PasswordSecurityQuestions");
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.TblCountry", b =>
                {
                    b.Property<int>("CountryId")
                        .HasColumnType("int")
                        .HasColumnName("CountryID");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .IsUnicode(false)
                        .HasColumnType("char(2)")
                        .IsFixedLength();

                    b.Property<string>("CountryName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("SortOrder")
                        .HasMaxLength(5)
                        .IsUnicode(false)
                        .HasColumnType("char(5)")
                        .IsFixedLength();

                    b.HasKey("CountryId");

                    b.ToTable("tblCountries", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.TblLicense", b =>
                {
                    b.Property<short>("LicenseId")
                        .HasColumnType("smallint")
                        .HasColumnName("LicenseID");

                    b.Property<string>("ActivationId")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ActivationID")
                        .HasDefaultValueSql("('00000-00000-00000-00000-00000')");

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<string>("AddressOther")
                        .HasColumnType("text")
                        .HasColumnName("Address_Other");

                    b.Property<string>("City")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ClientName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CountryName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasDefaultValueSql("(N'none')");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("EntryDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime>("ExpiryDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(dateadd(year,(1),getdate()))");

                    b.Property<bool?>("IsLicensed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasColumnName("isLicensed")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("PhoneNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ProductId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ProductID");

                    b.Property<string>("Province")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("StateId")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("StateID");

                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StatusID")
                        .HasDefaultValueSql("((2))");

                    b.Property<string>("Version")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasDefaultValueSql("('0.0.0')");

                    b.Property<string>("ZipCode")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.HasKey("LicenseId");

                    b.ToTable("tblLicense", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.TblLoginHistory", b =>
                {
                    b.Property<long>("TrNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TrNo"));

                    b.Property<DateTime?>("LoginDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<short?>("LoginUserId")
                        .HasColumnType("smallint")
                        .HasColumnName("LoginUserID");

                    b.Property<string>("LoginUserIp")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LoginUserIP");

                    b.Property<string>("LoginUserLocation")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LoginUserQuery")
                        .HasColumnType("text");

                    b.HasKey("TrNo");

                    b.HasIndex("LoginUserId");

                    b.ToTable("tblLoginHistory", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.TblStatus", b =>
                {
                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<string>("StatusName")
                        .HasMaxLength(15)
                        .HasColumnType("nchar(15)")
                        .IsFixedLength();

                    b.HasKey("StatusId");

                    b.ToTable("tblStatus", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.TblUser", b =>
                {
                    b.Property<short>("UserId")
                        .HasColumnType("smallint")
                        .HasColumnName("UserID");

                    b.Property<short?>("GroupId")
                        .HasColumnType("smallint")
                        .HasColumnName("GroupID");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("StatusID")
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("UserId")
                        .HasName("PK_tblMyUser");

                    b.HasIndex("GroupId");

                    b.ToTable("tblUsers", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.TblUserGroup", b =>
                {
                    b.Property<short>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("GroupID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("GroupId"));

                    b.Property<string>("GroupName")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("GroupId")
                        .HasName("PK_syGroups");

                    b.ToTable("tblUserGroups", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.TblW8benform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ArticleAndParagraph")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Article and paragraph");

                    b.Property<bool?>("CheckIfFtinNotLegallyRequiredYN")
                        .HasColumnType("bit")
                        .HasColumnName("Check if FTIN not legally required (Y/N)");

                    b.Property<string>("City")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Country")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("CountryOfCitizenship")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Country of citizenship");

                    b.Property<string>("DateOfBirthMmDdYyyy")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Date of birth (MM-DD-YYYY)");

                    b.Property<string>("EligibleForTheRateOfWithholding")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("eligible for the rate of withholding");

                    b.Property<string>("ForeignTaxIdentifyingNumber")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Foreign tax identifying number");

                    b.Property<string>("MCity")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("M_City");

                    b.Property<string>("MCountry")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("M_Country");

                    b.Property<string>("MailingAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Mailing address");

                    b.Property<string>("NameOfIndividual")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Name of Individual");

                    b.Property<string>("PermanentResidenceAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Permanent residence address");

                    b.Property<string>("PrintNameOfSigner")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Print name of signer");

                    b.Property<string>("Rate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("% rate");

                    b.Property<string>("ReferenceNumberS")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Reference number(s)");

                    b.Property<string>("ResidentCertification")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Resident_Certification");

                    b.Property<string>("SignatureDateMmDdYyyy")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Signature Date (MM-DD-YYYY)");

                    b.Property<string>("SpecifyTypeOfIncome")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("specify type of income");

                    b.Property<string>("SsnOrItin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("SSN or ITIN");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasDefaultValueSql("((1))")
                        .IsFixedLength();

                    b.Property<string>("UploadedFile")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Uploaded_File");

                    b.Property<string>("W8benemailAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("W8BENEmailAddress");

                    b.Property<DateTime?>("W8benentryDate")
                        .HasColumnType("date")
                        .HasColumnName("W8BENEntryDate");

                    b.Property<string>("W8benfontName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("W8BENFontName");

                    b.Property<bool?>("W8benonBehalfName")
                        .HasColumnType("bit")
                        .HasColumnName("W8BENOnBehalfName");

                    b.Property<string>("W8benprintName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("W8BENPrintName");

                    b.Property<int?>("W8benprintSize")
                        .HasColumnType("int")
                        .HasColumnName("W8BENPrintSize");

                    b.HasKey("Id")
                        .HasName("PK_W8_BEN");

                    b.ToTable("tblW8BENForm", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.TblW8ebeneform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActiveTabIndex")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("AddressRow1")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("AddressRow2")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("AddressRow3")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("AddressRow4")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("AddressRow5")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("AddressRow6")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("AddressRow7")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("AddressRow8")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("AddressRow9")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("City")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Country")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("CountryOfIncorporation")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Country of incorporation");

                    b.Property<string>("FatcaStatus")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("FATCA Status");

                    b.Property<string>("ForeignTaxIdentifyingNumber")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Foreign tax identifying number");

                    b.Property<bool?>("FtinCheck")
                        .HasColumnType("bit")
                        .HasColumnName("FTIN_CHECK");

                    b.Property<string>("Gin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("GIN");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("MCity")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("M_City");

                    b.Property<string>("MCountry")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("M_Country");

                    b.Property<string>("MailingAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Mailing address");

                    b.Property<string>("NameOfDiregardedEntity")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Name of Diregarded Entity");

                    b.Property<string>("NameOfOrganization")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Name of Organization");

                    b.Property<string>("NameRow1")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("NameRow2")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("NameRow3")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("NameRow4")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("NameRow5")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("NameRow6")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("NameRow7")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("NameRow8")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("NameRow9")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("PermanentResidenceAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Permanent residence address");

                    b.Property<string>("PrintNameOfSigner")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Print name of signer");

                    b.Property<string>("ReferenceNumberS")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Reference number(s)");

                    b.Property<string>("SignatureDateMmDdYyyy")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Signature Date (MM-DD-YYYY)");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasDefaultValueSql("((1))")
                        .IsFixedLength();

                    b.Property<string>("Tin1row7")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("TIN1Row7");

                    b.Property<string>("Tinrow1")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("TINRow1");

                    b.Property<string>("Tinrow2")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("TINRow2");

                    b.Property<string>("Tinrow3")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("TINRow3");

                    b.Property<string>("Tinrow4")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("TINRow4");

                    b.Property<string>("Tinrow5")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("TINRow5");

                    b.Property<string>("Tinrow6")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("TINRow6");

                    b.Property<string>("Tinrow8")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("TINRow8");

                    b.Property<string>("Tinrow9")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("TINRow9");

                    b.Property<string>("TypeOfEntity")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Type of Entity");

                    b.Property<string>("UploadedFile")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Uploaded_File");

                    b.Property<string>("UsTin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("US TIN");

                    b.Property<string>("W8beneemailAddress")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("W8BENEEmailAddress");

                    b.Property<string>("W8beneentryDate")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("W8BENEEntryDate");

                    b.Property<string>("W8benefontName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("W8BENEFontName");

                    b.Property<bool?>("W8beneonBehalfName")
                        .HasColumnType("bit")
                        .HasColumnName("W8BENEOnBehalfName");

                    b.Property<string>("W8beneprintName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("W8BENEPrintName");

                    b.Property<string>("W8beneprintSize")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("W8BENEPrintSize");

                    b.Property<string>("_11fatcaCb")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("11FATCA_CB");

                    b.Property<string>("_12City")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("12_City");

                    b.Property<string>("_12Country")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("12_Country");

                    b.Property<string>("_12mailingAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("12Mailing address");

                    b.Property<string>("_13gin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("13GIN");

                    b.Property<bool?>("_14aCb")
                        .HasColumnType("bit")
                        .HasColumnName("14aCB");

                    b.Property<string>("_14aTb")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("14aTB");

                    b.Property<bool?>("_14bCb1")
                        .HasColumnType("bit")
                        .HasColumnName("14bCB1");

                    b.Property<string>("_14bCb2others")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("14bCB2others");

                    b.Property<string>("_14bTb")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("14bTB");

                    b.Property<bool?>("_14cCb")
                        .HasColumnType("bit")
                        .HasColumnName("14cCB");

                    b.Property<string>("_15cTb1")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("15cTB1");

                    b.Property<string>("_15cTb2")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("15cTB2");

                    b.Property<string>("_15cTb3")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("15cTB3");

                    b.Property<string>("_15cTb4")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("15cTB4");

                    b.Property<string>("_16tb")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("16TB");

                    b.Property<bool?>("_17cb1")
                        .HasColumnType("bit")
                        .HasColumnName("17CB1");

                    b.Property<bool?>("_17cb2")
                        .HasColumnType("bit")
                        .HasColumnName("17CB2");

                    b.Property<bool?>("_18cb")
                        .HasColumnType("bit")
                        .HasColumnName("18CB");

                    b.Property<bool?>("_19cb")
                        .HasColumnType("bit")
                        .HasColumnName("19CB");

                    b.Property<string>("_20tb")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("20TB");

                    b.Property<bool?>("_21cb")
                        .HasColumnType("bit")
                        .HasColumnName("21CB");

                    b.Property<bool?>("_22cb")
                        .HasColumnType("bit")
                        .HasColumnName("22CB");

                    b.Property<bool?>("_23cb")
                        .HasColumnType("bit")
                        .HasColumnName("23CB");

                    b.Property<bool?>("_24aCb")
                        .HasColumnType("bit")
                        .HasColumnName("24aCB");

                    b.Property<string>("_24borcCb")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("24borcCB");

                    b.Property<bool?>("_24dCb")
                        .HasColumnType("bit")
                        .HasColumnName("24dCB");

                    b.Property<bool?>("_25aCb")
                        .HasColumnType("bit")
                        .HasColumnName("25aCB");

                    b.Property<string>("_25bcCb")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("25bcCB");

                    b.Property<bool?>("_26cb1")
                        .HasColumnType("bit")
                        .HasColumnName("26CB1");

                    b.Property<string>("_26cb2or3")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("26CB2or3");

                    b.Property<string>("_26cb4or5")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("26CB4or5");

                    b.Property<string>("_26tb1")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("26TB1");

                    b.Property<string>("_26tb2")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("26TB2");

                    b.Property<string>("_26tb3")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("26TB3");

                    b.Property<bool?>("_27cb")
                        .HasColumnType("bit")
                        .HasColumnName("27CB");

                    b.Property<string>("_28aorbCb")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("28aorbCB");

                    b.Property<string>("_29cb")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("29CB");

                    b.Property<bool?>("_30cb")
                        .HasColumnType("bit")
                        .HasColumnName("30CB");

                    b.Property<bool?>("_31cb")
                        .HasColumnType("bit")
                        .HasColumnName("31CB");

                    b.Property<bool?>("_32cb")
                        .HasColumnType("bit")
                        .HasColumnName("32CB");

                    b.Property<bool?>("_33cb")
                        .HasColumnType("bit")
                        .HasColumnName("33CB");

                    b.Property<string>("_33tb")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("33TB");

                    b.Property<bool?>("_34cb")
                        .HasColumnType("bit")
                        .HasColumnName("34CB");

                    b.Property<string>("_34tb")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("34TB");

                    b.Property<bool?>("_35cb")
                        .HasColumnType("bit")
                        .HasColumnName("35CB");

                    b.Property<string>("_35tb")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("35TB");

                    b.Property<bool?>("_36cb")
                        .HasColumnType("bit")
                        .HasColumnName("36CB");

                    b.Property<string>("_37aTb")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("37aTB");

                    b.Property<string>("_37aorbCb")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("37aorbCB");

                    b.Property<string>("_37bTb1")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("37bTB1");

                    b.Property<string>("_37bTb2")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("37bTB2");

                    b.Property<bool?>("_38cb")
                        .HasColumnType("bit")
                        .HasColumnName("38CB");

                    b.Property<bool?>("_39cb")
                        .HasColumnType("bit")
                        .HasColumnName("39CB");

                    b.Property<bool?>("_40aCb")
                        .HasColumnType("bit")
                        .HasColumnName("40aCB");

                    b.Property<string>("_40borcCb")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("40borcCB");

                    b.Property<bool?>("_41cb")
                        .HasColumnType("bit")
                        .HasColumnName("41CB");

                    b.Property<string>("_42tb")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("42TB");

                    b.Property<bool?>("_43cb")
                        .HasColumnType("bit")
                        .HasColumnName("43CB");

                    b.HasKey("Id")
                        .HasName("PK_W8_EBENE");

                    b.ToTable("tblW8EBENEForm", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.TblW8ebeneformBackup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address1")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Address11")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Address111")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Address12")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Address121")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Address13")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Address131")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Address1311")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Address14")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("City")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Country")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("CountryOfIncorporation")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Country of incorporation");

                    b.Property<string>("FatcaStatus")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("FATCA Status");

                    b.Property<string>("ForeignTaxIdentifyingNumber")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Foreign tax identifying number");

                    b.Property<string>("FtinCheck")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FTIN_CHECK");

                    b.Property<string>("Gin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("GIN");

                    b.Property<string>("MCity")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("M_City");

                    b.Property<string>("MCountry")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("M_Country");

                    b.Property<string>("MailingAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Mailing address");

                    b.Property<string>("Name1")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Name11")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Name111")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Name12")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Name121")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Name13")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Name131")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Name1311")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Name14")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("NameOfDiregardedEntity")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Name of Diregarded Entity");

                    b.Property<string>("NameOfOrganization")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Name of Organization");

                    b.Property<string>("PermanentResidenceAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Permanent residence address");

                    b.Property<string>("PrintNameOfSigner")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Print name of signer");

                    b.Property<string>("ReferenceNumberS")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Reference number(s)");

                    b.Property<string>("SignatureDateMmDdYyyy")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Signature Date (MM-DD-YYYY)");

                    b.Property<string>("Status")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("Tin1")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("TIN1");

                    b.Property<string>("Tin11")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("TIN11");

                    b.Property<string>("Tin111")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("TIN111");

                    b.Property<string>("Tin12")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("TIN12");

                    b.Property<string>("Tin121")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("TIN121");

                    b.Property<string>("Tin13")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("TIN13");

                    b.Property<string>("Tin131")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("TIN131");

                    b.Property<string>("Tin1311")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("TIN1311");

                    b.Property<string>("Tin14")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("TIN14");

                    b.Property<string>("TypeOfEntity")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Type of Entity");

                    b.Property<string>("UploadedFile")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Uploaded_File");

                    b.Property<string>("UsTin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("US TIN");

                    b.Property<string>("_11fatcaCb")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("11FATCA_CB");

                    b.Property<string>("_12City")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("12_City");

                    b.Property<string>("_12Country")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("12_Country");

                    b.Property<string>("_12mailingAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("12Mailing address");

                    b.Property<string>("_13gin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("13GIN");

                    b.Property<string>("_14aTextWithCb")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("14a_Text with CB");

                    b.Property<string>("_14b")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("14b");

                    b.Property<string>("_14c")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("14c");

                    b.Property<string>("_15a")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("15a");

                    b.Property<string>("_15b")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("15b");

                    b.Property<string>("_15c")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("15c");

                    b.Property<string>("_15d")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("15d");

                    b.Property<string>("_15e")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("15e");

                    b.Property<string>("_16")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("16");

                    b.Property<string>("_17a")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("17a");

                    b.Property<string>("_17b")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("17b");

                    b.Property<string>("_18")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("18");

                    b.Property<string>("_19")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("19");

                    b.Property<string>("_20Text")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("20_Text");

                    b.Property<string>("_21")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("21");

                    b.Property<string>("_22")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("22");

                    b.Property<string>("_23")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("23");

                    b.Property<string>("_24a")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("24a");

                    b.Property<string>("_24b")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("24b");

                    b.Property<string>("_24c")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("24c");

                    b.Property<string>("_24d")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("24d");

                    b.Property<string>("_25a")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("25a");

                    b.Property<string>("_25b")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("25b");

                    b.Property<string>("_25c")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("25c");

                    b.Property<string>("_26")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("26");

                    b.Property<string>("_26Cb")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("26_CB");

                    b.Property<string>("_26Cb2")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("26_CB2");

                    b.Property<string>("_26Text")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("26_Text");

                    b.Property<string>("_26Text2")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("26_Text2");

                    b.Property<string>("_26Text3")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("26_Text3");

                    b.Property<string>("_27")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("27");

                    b.Property<string>("_28a")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("28a");

                    b.Property<string>("_28b")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("28b");

                    b.Property<string>("_29a")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("29a");

                    b.Property<string>("_29b")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("29b");

                    b.Property<string>("_29c")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("29c");

                    b.Property<string>("_29d")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("29d");

                    b.Property<string>("_29e")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("29e");

                    b.Property<string>("_29f")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("29f");

                    b.Property<string>("_30")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("30");

                    b.Property<string>("_31")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("31");

                    b.Property<string>("_32")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("32");

                    b.Property<string>("_33")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("33");

                    b.Property<string>("_34TextWithCb")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("34 Text with CB");

                    b.Property<string>("_35TextWithCb")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("35 Text with CB");

                    b.Property<string>("_36")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("36");

                    b.Property<string>("_37aTextWithCb")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("37a Text with CB");

                    b.Property<string>("_37bTextWithCb")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("37b Text with CB");

                    b.Property<string>("_38")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("38");

                    b.Property<string>("_39")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("39");

                    b.Property<string>("_40a")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("40a");

                    b.Property<string>("_40b")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("40b");

                    b.Property<string>("_40c")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("40c");

                    b.Property<string>("_41")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("41");

                    b.Property<string>("_42Text")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("42_Text");

                    b.Property<string>("_43")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("43");

                    b.HasKey("Id")
                        .HasName("PK_W8_EBENE_BACKUP");

                    b.ToTable("tblW8EBENEForm_backup", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.TblW8eciform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActiveTabIndex")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("CheckIfFtinNotLegallyRequiredYN")
                        .HasColumnType("bit")
                        .HasColumnName("Check if FTIN not legally required (Y/N)");

                    b.Property<string>("City")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Country")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("CountryOfIncorporation")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Country of incorporation");

                    b.Property<string>("DateOfBirthMmDdYyyy")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Date of birth (MM-DD-YYYY)");

                    b.Property<bool?>("DealerCertification")
                        .HasColumnType("bit");

                    b.Property<string>("DisregardedEntity")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Disregarded Entity");

                    b.Property<string>("ForeignTaxIdentifyingNumber")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Foreign tax identifying number");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Items")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("MCity")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("M_City");

                    b.Property<string>("MailingAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Mailing address");

                    b.Property<string>("NameOfIndividual")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Name of Individual");

                    b.Property<string>("PermanentResidenceAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Permanent residence address");

                    b.Property<string>("PrintNameOfSigner")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Print name of signer");

                    b.Property<string>("ReferenceNumberS")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Reference number(s)");

                    b.Property<string>("SignatureDateMmDdYyyy")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Signature Date (MM-DD-YYYY)");

                    b.Property<string>("SsnOrItin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("SSN or ITIN");

                    b.Property<string>("Ssnitnein")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("SSNITNEIN");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasDefaultValueSql("((1))")
                        .IsFixedLength();

                    b.Property<string>("TypeOfEntity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Type Of Entity");

                    b.Property<string>("UploadedFile")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Uploaded_File");

                    b.Property<string>("W8eciemailAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("W8ECIEmailAddress");

                    b.Property<DateTime?>("W8ecientryDate")
                        .HasColumnType("date")
                        .HasColumnName("W8ECIEntryDate");

                    b.Property<string>("W8ecifontName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("W8ECIFontName");

                    b.Property<bool?>("W8ecionBehalfName")
                        .HasColumnType("bit")
                        .HasColumnName("W8ECIOnBehalfName");

                    b.Property<string>("W8eciprintName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("W8ECIPrintName");

                    b.Property<int?>("W8eciprintSize")
                        .HasColumnType("int")
                        .HasColumnName("W8ECIPrintSize");

                    b.HasKey("Id")
                        .HasName("PK_W8_ECI");

                    b.ToTable("tblW8ECIForm", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.TblW8expform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActiveTabIndex")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("CheckIfFtinNotLegallyRequiredYN")
                        .HasColumnType("bit")
                        .HasColumnName("Check if FTIN not legally required (Y/N)");

                    b.Property<string>("City")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Country")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("CountryOfIncorporation")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Country of incorporation");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("FatcaStatus")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("FATCA Status");

                    b.Property<string>("FontName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ForeignTaxIdentifyingNumber")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Foreign tax identifying number");

                    b.Property<string>("Gin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("GIN");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("MCity")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("M_City");

                    b.Property<string>("MCountry")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("M_Country");

                    b.Property<string>("MailingAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Mailing address");

                    b.Property<string>("NameOfOrganization")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Name of Organization");

                    b.Property<string>("PermanentResidenceAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Permanent residence address");

                    b.Property<string>("PrintNameOfSigner")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Print name of signer");

                    b.Property<int?>("PrintSize")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceNumberS")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Reference number(s)");

                    b.Property<string>("SignatureDateMmDdYyyy")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Signature Date (MM-DD-YYYY)");

                    b.Property<string>("SsnOrItin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("SSN or ITIN");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasDefaultValueSql("((1))")
                        .IsFixedLength();

                    b.Property<string>("TypeOfEntity")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Type of Entity");

                    b.Property<string>("UploadedFile")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Uploaded_File");

                    b.Property<bool?>("_10a")
                        .HasColumnType("bit")
                        .HasColumnName("10a");

                    b.Property<bool?>("_10b")
                        .HasColumnType("bit")
                        .HasColumnName("10b");

                    b.Property<string>("_10bText")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("10b_Text");

                    b.Property<bool?>("_10c")
                        .HasColumnType("bit")
                        .HasColumnName("10c");

                    b.Property<string>("_10cText")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("10c_Text");

                    b.Property<bool?>("_11")
                        .HasColumnType("bit")
                        .HasColumnName("11");

                    b.Property<bool?>("_12")
                        .HasColumnType("bit")
                        .HasColumnName("12");

                    b.Property<bool?>("_13a")
                        .HasColumnType("bit")
                        .HasColumnName("13a");

                    b.Property<string>("_13aText")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("13a_Text");

                    b.Property<bool?>("_13b")
                        .HasColumnType("bit")
                        .HasColumnName("13b");

                    b.Property<bool?>("_13c")
                        .HasColumnType("bit")
                        .HasColumnName("13c");

                    b.Property<bool?>("_13d")
                        .HasColumnType("bit")
                        .HasColumnName("13d");

                    b.Property<bool?>("_14")
                        .HasColumnType("bit")
                        .HasColumnName("14");

                    b.Property<bool?>("_15")
                        .HasColumnType("bit")
                        .HasColumnName("15");

                    b.Property<string>("_15Text1")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("15_Text1");

                    b.Property<string>("_15Text2")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("15_Text2");

                    b.Property<string>("_15Text3")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("15_Text3");

                    b.Property<bool?>("_16")
                        .HasColumnType("bit")
                        .HasColumnName("16");

                    b.Property<bool?>("_17")
                        .HasColumnType("bit")
                        .HasColumnName("17");

                    b.Property<bool?>("_18")
                        .HasColumnType("bit")
                        .HasColumnName("18");

                    b.Property<bool?>("_19")
                        .HasColumnType("bit")
                        .HasColumnName("19");

                    b.Property<bool?>("_20a")
                        .HasColumnType("bit")
                        .HasColumnName("20a");

                    b.Property<bool?>("_20b")
                        .HasColumnType("bit")
                        .HasColumnName("20b");

                    b.Property<bool?>("_20c")
                        .HasColumnType("bit")
                        .HasColumnName("20c");

                    b.Property<bool?>("_21")
                        .HasColumnType("bit")
                        .HasColumnName("21");

                    b.Property<string>("_21Text")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("21_Text");

                    b.HasKey("Id")
                        .HasName("PK_W8_EXP");

                    b.HasIndex(new[] { "EmailAddress" }, "idx_W8EXpEmailAddress");

                    b.ToTable("tblW8EXPForm", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.TblW8imyform", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ActiveTabIndex")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("City")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Country")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("CountryOfIncorporation")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Country of incorporation");

                    b.Property<bool?>("De")
                        .HasColumnType("bit")
                        .HasColumnName("DE");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(250)
                        .IsUnicode(false)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("FatcaStatus")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("FATCA Status");

                    b.Property<string>("FilePath")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("FontName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<bool?>("ForeignNumberCb")
                        .HasColumnType("bit")
                        .HasColumnName("ForeignNumber_CB");

                    b.Property<string>("ForeignTaxIdentifyingNumber")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Foreign tax identifying number");

                    b.Property<string>("Gin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("GIN");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("MCity")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("M_City");

                    b.Property<string>("MCountry")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("M_Country");

                    b.Property<string>("MailingAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Mailing address");

                    b.Property<string>("NameOfDiregardedEntity")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Name of Diregarded Entity");

                    b.Property<string>("NameOfOrganization")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Name of Organization");

                    b.Property<string>("OnBehalfName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("PermanentResidenceAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Permanent residence address");

                    b.Property<string>("PrintNameOfSigner")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Print name of signer");

                    b.Property<int?>("PrintSize")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceNumberS")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Reference number(s)");

                    b.Property<string>("SignatureDateMmDdYyyy")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Signature Date (MM-DD-YYYY)");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasDefaultValueSql("((1))")
                        .IsFixedLength();

                    b.Property<string>("TypeOfEntity")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Type of Entity");

                    b.Property<string>("UploadedFile")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Uploaded_File");

                    b.Property<string>("UsTin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("US TIN");

                    b.Property<string>("UsTinCb")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("US_TIN_CB");

                    b.Property<string>("_11fatcaCb")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("11FATCA_CB");

                    b.Property<string>("_12City")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("12_City");

                    b.Property<string>("_12Country")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("12_Country");

                    b.Property<string>("_12Province")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("12_Province");

                    b.Property<string>("_12State")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("12_State");

                    b.Property<string>("_12mailingAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("12Mailing address");

                    b.Property<string>("_13gin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("13GIN");

                    b.Property<bool?>("_14Cb")
                        .HasColumnType("bit")
                        .HasColumnName("14_CB");

                    b.Property<bool?>("_15a")
                        .HasColumnType("bit")
                        .HasColumnName("15a");

                    b.Property<bool?>("_15b")
                        .HasColumnType("bit")
                        .HasColumnName("15b");

                    b.Property<bool?>("_15c")
                        .HasColumnType("bit")
                        .HasColumnName("15c");

                    b.Property<bool?>("_15d")
                        .HasColumnType("bit")
                        .HasColumnName("15d");

                    b.Property<bool?>("_15e")
                        .HasColumnType("bit")
                        .HasColumnName("15e");

                    b.Property<bool?>("_15f")
                        .HasColumnType("bit")
                        .HasColumnName("15f");

                    b.Property<bool?>("_15g")
                        .HasColumnType("bit")
                        .HasColumnName("15g");

                    b.Property<bool?>("_15h")
                        .HasColumnType("bit")
                        .HasColumnName("15h");

                    b.Property<bool?>("_15i")
                        .HasColumnType("bit")
                        .HasColumnName("15i");

                    b.Property<bool?>("_16a")
                        .HasColumnType("bit")
                        .HasColumnName("16a");

                    b.Property<string>("_16b")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("16b");

                    b.Property<bool?>("_17a")
                        .HasColumnType("bit")
                        .HasColumnName("17a");

                    b.Property<bool?>("_17b")
                        .HasColumnType("bit")
                        .HasColumnName("17b");

                    b.Property<bool?>("_17c")
                        .HasColumnType("bit")
                        .HasColumnName("17c");

                    b.Property<bool?>("_17d")
                        .HasColumnType("bit")
                        .HasColumnName("17d");

                    b.Property<bool?>("_17e")
                        .HasColumnType("bit")
                        .HasColumnName("17e");

                    b.Property<bool?>("_18a")
                        .HasColumnType("bit")
                        .HasColumnName("18a");

                    b.Property<bool?>("_18b")
                        .HasColumnType("bit")
                        .HasColumnName("18b");

                    b.Property<bool?>("_18c")
                        .HasColumnType("bit")
                        .HasColumnName("18c");

                    b.Property<bool>("_18d")
                        .HasColumnType("bit")
                        .HasColumnName("18d");

                    b.Property<bool?>("_18e")
                        .HasColumnType("bit")
                        .HasColumnName("18e");

                    b.Property<bool?>("_18f")
                        .HasColumnType("bit")
                        .HasColumnName("18f");

                    b.Property<bool?>("_19a")
                        .HasColumnType("bit")
                        .HasColumnName("19a");

                    b.Property<bool?>("_19b")
                        .HasColumnType("bit")
                        .HasColumnName("19b");

                    b.Property<bool?>("_19c")
                        .HasColumnType("bit")
                        .HasColumnName("19c");

                    b.Property<bool?>("_19d")
                        .HasColumnType("bit")
                        .HasColumnName("19d");

                    b.Property<bool?>("_19e")
                        .HasColumnType("bit")
                        .HasColumnName("19e");

                    b.Property<bool?>("_19f")
                        .HasColumnType("bit")
                        .HasColumnName("19f");

                    b.Property<bool?>("_20")
                        .HasColumnType("bit")
                        .HasColumnName("20");

                    b.Property<bool?>("_21a")
                        .HasColumnType("bit")
                        .HasColumnName("21a");

                    b.Property<bool?>("_21b")
                        .HasColumnType("bit")
                        .HasColumnName("21b");

                    b.Property<bool?>("_21c")
                        .HasColumnType("bit")
                        .HasColumnName("21c");

                    b.Property<bool?>("_21d")
                        .HasColumnType("bit")
                        .HasColumnName("21d");

                    b.Property<bool?>("_21e")
                        .HasColumnType("bit")
                        .HasColumnName("21e");

                    b.Property<bool?>("_21f")
                        .HasColumnType("bit")
                        .HasColumnName("21f");

                    b.Property<bool?>("_22")
                        .HasColumnType("bit")
                        .HasColumnName("22");

                    b.Property<string>("_23aText")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("23a_Text");

                    b.Property<bool?>("_23b")
                        .HasColumnType("bit")
                        .HasColumnName("23b");

                    b.Property<bool?>("_23c")
                        .HasColumnType("bit")
                        .HasColumnName("23c");

                    b.Property<bool?>("_24a")
                        .HasColumnType("bit")
                        .HasColumnName("24a");

                    b.Property<bool?>("_24b")
                        .HasColumnType("bit")
                        .HasColumnName("24b");

                    b.Property<bool?>("_24c")
                        .HasColumnType("bit")
                        .HasColumnName("24c");

                    b.Property<bool?>("_25")
                        .HasColumnType("bit")
                        .HasColumnName("25");

                    b.Property<bool?>("_26")
                        .HasColumnType("bit")
                        .HasColumnName("26");

                    b.Property<string>("_27aText")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("27a_Text");

                    b.Property<bool?>("_27b")
                        .HasColumnType("bit")
                        .HasColumnName("27b");

                    b.Property<bool?>("_28")
                        .HasColumnType("bit")
                        .HasColumnName("28");

                    b.Property<bool?>("_29")
                        .HasColumnType("bit")
                        .HasColumnName("29");

                    b.Property<bool?>("_30a")
                        .HasColumnType("bit")
                        .HasColumnName("30a");

                    b.Property<bool?>("_30b")
                        .HasColumnType("bit")
                        .HasColumnName("30b");

                    b.Property<bool?>("_30c")
                        .HasColumnType("bit")
                        .HasColumnName("30c");

                    b.Property<bool?>("_31")
                        .HasColumnType("bit")
                        .HasColumnName("31");

                    b.Property<bool?>("_32Cb1")
                        .HasColumnType("bit")
                        .HasColumnName("32_CB1");

                    b.Property<string>("_32Cb2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("32_CB2");

                    b.Property<string>("_32Cb3")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("32_CB3");

                    b.Property<string>("_32Text1")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("32_Text1");

                    b.Property<string>("_32Text2")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("32_Text2");

                    b.Property<string>("_32Text3")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("32_Text3");

                    b.Property<bool?>("_33a")
                        .HasColumnType("bit")
                        .HasColumnName("33a");

                    b.Property<bool?>("_33b")
                        .HasColumnType("bit")
                        .HasColumnName("33b");

                    b.Property<bool?>("_33c")
                        .HasColumnType("bit")
                        .HasColumnName("33c");

                    b.Property<bool?>("_33d")
                        .HasColumnType("bit")
                        .HasColumnName("33d");

                    b.Property<bool?>("_33e")
                        .HasColumnType("bit")
                        .HasColumnName("33e");

                    b.Property<bool?>("_33f")
                        .HasColumnType("bit")
                        .HasColumnName("33f");

                    b.Property<bool?>("_34")
                        .HasColumnType("bit")
                        .HasColumnName("34");

                    b.Property<bool?>("_35Cb")
                        .HasColumnType("bit")
                        .HasColumnName("35_CB");

                    b.Property<DateTime?>("_35Text")
                        .HasColumnType("datetime")
                        .HasColumnName("35_Text");

                    b.Property<bool?>("_36")
                        .HasColumnType("bit")
                        .HasColumnName("36");

                    b.Property<DateTime?>("_36Text")
                        .HasColumnType("datetime")
                        .HasColumnName("36_Text");

                    b.Property<bool?>("_37aCb")
                        .HasColumnType("bit")
                        .HasColumnName("37a_CB");

                    b.Property<string>("_37aText")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("37a_Text");

                    b.Property<bool?>("_37bCb")
                        .HasColumnType("bit")
                        .HasColumnName("37b_CB");

                    b.Property<string>("_37bText1")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("37b_Text1");

                    b.Property<string>("_37bText2")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("37b_Text2");

                    b.Property<bool?>("_38")
                        .HasColumnType("bit")
                        .HasColumnName("38");

                    b.Property<bool?>("_39")
                        .HasColumnType("bit")
                        .HasColumnName("39");

                    b.Property<bool?>("_40")
                        .HasColumnType("bit")
                        .HasColumnName("40");

                    b.Property<string>("_41Text")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("41_Text");

                    b.Property<bool?>("_42Cb")
                        .HasColumnType("bit")
                        .HasColumnName("42_CB");

                    b.HasKey("Id")
                        .HasName("PK_W8_IMY");

                    b.HasIndex(new[] { "EmailAddress" }, "idx_ImyEmailAddress");

                    b.ToTable("tblW8IMYForm", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.TblW8imyformBckup", b =>
                {
                    b.Property<string>("City")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Country")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("CountryOfIncorporation")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Country of incorporation");

                    b.Property<string>("FatcaStatus")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("FATCA Status");

                    b.Property<string>("ForeignTaxIdentifyingNumber")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Foreign tax identifying number");

                    b.Property<string>("Gin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("GIN");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("MCity")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("M_City");

                    b.Property<string>("MCountry")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("M_Country");

                    b.Property<string>("MailingAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Mailing address");

                    b.Property<string>("NameOfDiregardedEntity")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Name of Diregarded Entity");

                    b.Property<string>("NameOfOrganization")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Name of Organization");

                    b.Property<string>("PermanentResidenceAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Permanent residence address");

                    b.Property<string>("PrintNameOfSigner")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Print name of signer");

                    b.Property<string>("ReferenceNumberS")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Reference number(s)");

                    b.Property<string>("SignatureDateMmDdYyyy")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Signature Date (MM-DD-YYYY)");

                    b.Property<string>("Status")
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<string>("TypeOfEntity")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Type of Entity");

                    b.Property<string>("UploadedFile")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Uploaded_File");

                    b.Property<string>("UsTin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("US TIN");

                    b.Property<string>("UsTinCb")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("US_TIN_CB");

                    b.Property<string>("_11fatcaCb")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("11FATCA_CB");

                    b.Property<string>("_12City")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("12_City");

                    b.Property<string>("_12Country")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("12_Country");

                    b.Property<string>("_12mailingAddress")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("12Mailing address");

                    b.Property<string>("_13gin")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("13GIN");

                    b.Property<string>("_14Cb")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("14_CB");

                    b.Property<string>("_15a")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("15a");

                    b.Property<string>("_15b")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("15b");

                    b.Property<string>("_15c")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("15c");

                    b.Property<string>("_15d")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("15d");

                    b.Property<string>("_15e")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("15e");

                    b.Property<string>("_15f")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("15f");

                    b.Property<string>("_15g")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("15g");

                    b.Property<string>("_15h")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("15h");

                    b.Property<string>("_15i")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("15i");

                    b.Property<string>("_16a")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("16a");

                    b.Property<string>("_16b")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("16b");

                    b.Property<string>("_17a")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("17a");

                    b.Property<string>("_17b")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("17b");

                    b.Property<string>("_17c")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("17c");

                    b.Property<string>("_17d")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("17d");

                    b.Property<string>("_17e")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("17e");

                    b.Property<string>("_18a")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("18a");

                    b.Property<string>("_18b")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("18b");

                    b.Property<string>("_18c")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("18c");

                    b.Property<string>("_18d")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("18d");

                    b.Property<string>("_18e")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("18e");

                    b.Property<string>("_18f")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("18f");

                    b.Property<string>("_19a")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("19a");

                    b.Property<string>("_19b")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("19b");

                    b.Property<string>("_19c")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("19c");

                    b.Property<string>("_19d")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("19d");

                    b.Property<string>("_19e")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("19e");

                    b.Property<string>("_19f")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("19f");

                    b.Property<string>("_20")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("20");

                    b.Property<string>("_21a")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("21a");

                    b.Property<string>("_21b")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("21b");

                    b.Property<string>("_21c")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("21c");

                    b.Property<string>("_21d")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("21d");

                    b.Property<string>("_21e")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("21e");

                    b.Property<string>("_21f")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("21f");

                    b.Property<string>("_22")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("22");

                    b.Property<string>("_23aText")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("23a_Text");

                    b.Property<string>("_23b")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("23b");

                    b.Property<string>("_23c")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("23c");

                    b.Property<string>("_24a")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("24a");

                    b.Property<string>("_24b")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("24b");

                    b.Property<string>("_24c")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("24c");

                    b.Property<string>("_25")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("25");

                    b.Property<string>("_26")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("26");

                    b.Property<string>("_27aText")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("27a_Text");

                    b.Property<string>("_27b")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("27b");

                    b.Property<string>("_28")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("28");

                    b.Property<string>("_29")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("29");

                    b.Property<string>("_30a")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("30a");

                    b.Property<string>("_30b")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("30b");

                    b.Property<string>("_30c")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("30c");

                    b.Property<string>("_31")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("31");

                    b.Property<string>("_32Cb1")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("32_CB1");

                    b.Property<string>("_32Cb2")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("32_CB2");

                    b.Property<string>("_32Text1")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("32_Text1");

                    b.Property<string>("_32Text2")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("32_Text2");

                    b.Property<string>("_32Text3")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("32_Text3");

                    b.Property<string>("_33a")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("33a");

                    b.Property<string>("_33b")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("33b");

                    b.Property<string>("_33c")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("33c");

                    b.Property<string>("_33d")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("33d");

                    b.Property<string>("_33e")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("33e");

                    b.Property<string>("_33f")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("33f");

                    b.Property<string>("_34")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("34");

                    b.Property<string>("_35Cb")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("35_CB");

                    b.Property<string>("_35Text")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("35_Text");

                    b.Property<string>("_36")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("36");

                    b.Property<string>("_37aTextWithCb")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("37a_Text with CB");

                    b.Property<string>("_37bText1WithCb")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("37b_Text1 with CB");

                    b.Property<string>("_37bText2WithCb")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("37b_Text2 with CB");

                    b.Property<string>("_38")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("38");

                    b.Property<string>("_39")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("39");

                    b.Property<string>("_40")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("40");

                    b.Property<string>("_41Text")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("41_Text");

                    b.Property<string>("_42Cb")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("42_CB");

                    b.ToTable("tblW8IMYForm_bckup", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.TblW9form", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Address1")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("BusinessEntity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("City1")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Country")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Country1")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Exemptions")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Fatca")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FATCA");

                    b.Property<string>("FederalTaxClassification")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("ListofAccounts")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Printed")
                        .HasColumnType("bit");

                    b.Property<string>("SsnTin")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SSN_TIN");

                    b.Property<string>("Status")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasDefaultValueSql("((1))")
                        .IsFixedLength();

                    b.Property<long?>("Trid")
                        .HasColumnType("bigint");

                    b.Property<string>("UploadedFile")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Uploaded_File");

                    b.Property<string>("W9emailAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("W9EmailAddress");

                    b.Property<DateTime?>("W9entryDate")
                        .HasColumnType("date")
                        .HasColumnName("W9EntryDate");

                    b.Property<string>("W9fontName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("W9FontName");

                    b.Property<string>("W9printName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("W9PrintName");

                    b.Property<int?>("W9printSize")
                        .HasColumnType("int")
                        .HasColumnName("W9PrintSize");

                    b.HasKey("Id")
                        .HasName("PK_W9_2");

                    b.ToTable("tblW9Form", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.TblW9formIndividual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BusinessEntity")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Exemptions")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Fatca")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("FATCA");

                    b.Property<string>("FederalTaxClassification")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("LastUpdatedon")
                        .HasColumnType("datetime");

                    b.Property<string>("ListofAccounts")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("Printed")
                        .HasColumnType("bit");

                    b.Property<string>("SsnTin")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("SSN_TIN");

                    b.Property<long?>("Trid")
                        .HasColumnType("bigint");

                    b.Property<string>("UploadedFile")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("Uploaded_File");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PK_W9_I");

                    b.ToTable("tblW9Form_Individual", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.TblxxxU", b =>
                {
                    b.Property<short?>("GroupId")
                        .HasColumnType("smallint")
                        .HasColumnName("GroupID");

                    b.Property<string>("Password")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("StatusID");

                    b.Property<short>("UserId")
                        .HasColumnType("smallint")
                        .HasColumnName("UserID");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable("tblxxxU", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.ViewClient", b =>
                {
                    b.Property<string>("Address")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("ClientEmailId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ClientEmailID");

                    b.Property<int>("ClientId")
                        .HasColumnType("int")
                        .HasColumnName("ClientID");

                    b.Property<string>("ClientStatus")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ClientStatusDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Country")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("EntityId")
                        .HasColumnType("int")
                        .HasColumnName("EntityID");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("FileName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<short>("InstituteId")
                        .HasColumnType("smallint")
                        .HasColumnName("InstituteID");

                    b.Property<string>("PartnerName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Partner Name");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Phone Number");

                    b.Property<string>("Province")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("State")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Zip")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.ToTable((string)null);

                    b.ToView("view_Clients", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.W8bene14b", b =>
                {
                    b.Property<int>("_14bId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("14B_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("_14bId"));

                    b.Property<string>("_14b")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("14B");

                    b.HasKey("_14bId");

                    b.ToTable("W8BENE14B", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.W8beneEntityType", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EntityID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<string>("EntityType")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("EntityId");

                    b.ToTable("W8BENE_EntityType", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.W8benefatca", b =>
                {
                    b.Property<int>("FatcaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FATCA_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FatcaId"));

                    b.Property<string>("Fatca")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("FATCA");

                    b.HasKey("FatcaId");

                    b.ToTable("W8BENEFATCA", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.W8benefatcade", b =>
                {
                    b.Property<int>("FatcaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FATCA_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FatcaId"));

                    b.Property<string>("Fatca")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("FATCA");

                    b.HasKey("FatcaId");

                    b.ToTable("W8BENEFATCADE", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.W8eciEntityType", b =>
                {
                    b.Property<int?>("EntityId")
                        .HasColumnType("int")
                        .HasColumnName("EntityID");

                    b.Property<string>("EntityType")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.ToTable("W8ECI_EntityType", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.W8expentity", b =>
                {
                    b.Property<int>("EntityId")
                        .HasColumnType("int")
                        .HasColumnName("EntityID");

                    b.Property<string>("EntityName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("EntityId");

                    b.ToTable("W8EXPEntity", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.W8expfatca", b =>
                {
                    b.Property<int>("FatcaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FATCA_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FatcaId"));

                    b.Property<string>("Fatca")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("FATCA");

                    b.HasKey("FatcaId");

                    b.ToTable("W8EXPFATCA", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.W8imyEntityType", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("EntityID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityId"));

                    b.Property<string>("EntityType")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.ToTable("W8IMY_EntityType", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.W8imyFatca", b =>
                {
                    b.Property<string>("Fatca")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("FATCA");

                    b.Property<int>("FatcaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FATCA_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FatcaId"));

                    b.ToTable("W8IMY_FATCA", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.W8imyfatcade", b =>
                {
                    b.Property<string>("Fatca")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)")
                        .HasColumnName("FATCA");

                    b.Property<int>("FatcaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FATCA_ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FatcaId"));

                    b.ToTable("W8IMYFATCADE", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.W9", b =>
                {
                    b.Property<string>("Column1")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double?>("F1")
                        .HasColumnType("float");

                    b.Property<string>("F10")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("F11")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("F2")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("F3")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double?>("F4")
                        .HasColumnType("float");

                    b.Property<string>("F5")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("F6")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("F7")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<double?>("F8")
                        .HasColumnType("float");

                    b.Property<double?>("F9")
                        .HasColumnType("float");

                    b.ToTable("'W-9$'", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.W91", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.Property<bool?>("Testing")
                        .HasColumnType("bit");

                    b.Property<bool?>("Testing1")
                        .HasColumnType("bit");

                    b.ToTable("W9-1", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.TblLoginHistory", b =>
                {
                    b.HasOne("EvolvedTax.Data.Models.Entities.TblUser", "LoginUser")
                        .WithMany("TblLoginHistories")
                        .HasForeignKey("LoginUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_tblLoginHistory_tblUsers");

                    b.Navigation("LoginUser");
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.TblUser", b =>
                {
                    b.HasOne("EvolvedTax.Data.Models.Entities.TblUserGroup", "Group")
                        .WithMany("TblUsers")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_tblUsers_tblGroups");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.TblUser", b =>
                {
                    b.Navigation("TblLoginHistories");
                });

            modelBuilder.Entity("EvolvedTax.Data.Models.Entities.TblUserGroup", b =>
                {
                    b.Navigation("TblUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
